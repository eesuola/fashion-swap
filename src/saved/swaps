const request = require("supertest");
const app = require("../app"); 
const { sequelize, User, Item, SwapRequest } = require("../models");

let userAToken, userBToken, itemAId, itemBId;

beforeAll(async () => {
  await sequelize.sync({ force: true });

  // Create User A
  await User.create({
    name: "User A",
    email: "usera@email.com",
    password: "password123",
  });

  // Create User B
  await User.create({
    name: "User B",
    email: "userb@email.com",
    password: "password123",
  });

  // Login User A
  const resA = await request(app)
    .post("/api/auth/login")
    .send({ email: "usera@email.com", password: "password123" });
  userAToken = resA.body.token;

  // Login User B
  const resB = await request(app)
    .post("/api/auth/login")
    .send({ email: "userb@email.com", password: "password123" });
  userBToken = resB.body.token;

  // User A creates an item
  const itemA = await request(app)
    .post("/api/items/create")
    .set("Authorization", `Bearer ${userAToken}`)
    .field("title", "Red Jacket")
    .field("description", "Stylish red jacket")
    .field("category", "Clothing")
    .field("type", "swap");
  itemAId = itemA.body.id;

  // User B creates an item
  const itemB = await request(app)
    .post("/api/items/create")
    .set("Authorization", `Bearer ${userBToken}`)
    .field("title", "Blue Sneakers")
    .field("description", "Comfortable sneakers")
    .field("category", "Shoes")
    .field("type", "swap");
  itemBId = itemB.body.id;
});

afterAll(async () => {
  await sequelize.close();
});

describe("Swap Requests API", () => {
  test("User B sends a swap request to User A", async () => {
    const res = await request(app)
      .post("/api/swaps/create")
      .set("Authorization", `Bearer ${userBToken}`)
      .send({
        fromItemId: itemBId,
        toItemId: itemAId,
        toUserId: (await User.findOne({ where: { email: "usera@email.com" } }))
          .id,
      });

    expect(res.statusCode).toBe(201);
    expect(res.body).toHaveProperty("status", "pending");
    expect(res.body).toHaveProperty("fromItemId", itemBId);
    expect(res.body).toHaveProperty("toItemId", itemAId);
  });

  test("User A can view received swap requests", async () => {
    const res = await request(app)
      .get("/api/swaps")
      .set("Authorization", `Bearer ${userAToken}`);

    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
    expect(res.body[0]).toHaveProperty("status", "pending");
  });

  test("User A accepts swap request", async () => {
    const swap = await SwapRequest.findOne();
    const res = await request(app)
      .put(`/api/swaps/${swap.id}/accept`)
      .set("Authorization", `Bearer ${userAToken}`);

    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty("status", "accepted");
  });
});
